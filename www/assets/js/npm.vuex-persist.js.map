{"version":3,"sources":["webpack:///../../src/SimplePromiseQueue.ts","webpack:///../../src/utils.ts","webpack:///../../src/index.ts"],"names":["SimplePromiseQueue","Object","C_Users_OSO_Desktop_JavaScript_Programming_Projects_zireael_github_io_v2_zireael_github_io_node_modules_babel_runtime_corejs2_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","this","_queue","_flushing","promise","push","Promise","resolve","flushQueue","_this","chain","nextTask","shift","then","merge","into","from","lodash_merge__WEBPACK_IMPORTED_MODULE_7___default","CircularJSON","JSON","VuexPersistence","options","_this2","_mutex","subscriber","store","handler","subscribe","key","subscribed","supportCircular","__webpack_require__","storage","window","localStorage","reducer","modules","state","reduce","a","i","C_Users_OSO_Desktop_JavaScript_Programming_Projects_zireael_github_io_v2_zireael_github_io_node_modules_babel_runtime_corejs2_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","_i2","_Object$keys2","keys","length","propertyName","_vm","$set","asyncStorage","storageConfig","_config","name","restoreState","getItem","value","parse","saveState","setItem","stringify","plugin","commit","replaceState","enqueue"],"mappings":"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","file":"assets/js/npm.vuex-persist.js","sourcesContent":["// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","import lodashMerge from 'lodash.merge'\n\nexport function merge(into: any, from: any) {\n  return lodashMerge({}, into, from)\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport {Mutation, MutationPayload, Payload, Plugin, Store} from 'vuex'\nimport {AsyncStorage} from './AsyncStorage'\nimport { MockStorage } from './MockStorage'\nimport {PersistOptions} from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\nimport {merge} from './utils'\n\nlet CircularJSON = JSON\n\n/**\n * A class that implements the vuex persistence.\n * @type S type of the 'state' inside the store (default: any)\n */\nexport class VuexPersistence<S> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => Partial<S>\n  public key: string\n  public filter: (mutation: Payload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options?: PersistOptions<S>) {\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      CircularJSON = require('circular-json')\n    }\n\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'production') {\n      this.storage = options.storage ||  window.localStorage\n    } else {\n      // @ts-ignore\n      if (process.env.MODULE_FORMAT !== 'umd') {\n        this.storage = options.storage || (typeof window !== 'undefined' ? window.localStorage : new MockStorage!())\n      } else {\n        // If UMD module, then we will only be having localStorage\n        this.storage = options.storage || window.localStorage\n      }\n    }\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options!.modules as string[]).reduce((a, i) =>\n                  merge(a, {[i]: state[i]}), {/* start empty accumulator*/})\n            )\n        )\n    )\n\n    this.filter = options.filter || ((mutation) => true)\n\n    this.strictMode = options.strictMode || false\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge(state, savedState || {})\n      for (const propertyName of Object.keys(mergedState)) {\n        (this as any)._vm.$set(state, propertyName, mergedState[propertyName])\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n    const storageConfig = this.storage && ((this.storage) as any)._config\n    this.asyncStorage = this.asyncStorage || (storageConfig && storageConfig.name) === 'localforage'\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n              (storage).getItem(key)\n                .then((value) =>\n                  typeof value === 'string' // If string, parse, or else, just return\n                    ? (\n                      this.supportCircular\n                        ? CircularJSON.parse(value || '{}')\n                        : JSON.parse(value || '{}')\n                    )\n                    : (value || {})\n                )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (((storage && storage._config && storage._config.name) === 'localforage')\n                    ? merge({}, state || {})\n                    : (\n                      this.supportCircular\n                        ? CircularJSON.stringify(state) as any\n                        : JSON.stringify(state) as any\n                    )\n                )\n              )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState || {}))\n          }\n\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n            const value = (storage).getItem(key)\n            if (typeof value === 'string') {// If string, parse, or else, just return\n              return (\n                this.supportCircular\n                  ? CircularJSON.parse(value || '{}')\n                  : JSON.parse(value || '{}')\n              )\n            } else {\n              return (value || {})\n            }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (\n                  this.supportCircular\n                    ? CircularJSON.stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState || {}))\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"],"sourceRoot":""}